/**
 * This class exposes extends the Default System Interface class used by Order Management to
 * make a synchronous callout to an Integration Procedure (rather than a direct REST API call).
 *
 * The general flow is as follows:
 * 
 *  -----------    ------------------    ------------    -----------------------
 * | Orch Item |  | System Interface |  | this Class |  | Integration Procedure |
 *  -----------    ------------------    ------------    -----------------------
 *       |                 |                   |                    |
 *       |     execute     |                   |                    |
 *       |---------------->|    startBatch()   |                    |
 *       |                 |------------------>|                    |
 *       |                 |                   |                    |
 *       |                 |   executeItem()   |                    |
 *       |                 |------------------>|      call IP       |
 *       |                 |                   |------------------->|
 *       |                 |                   |                    |<----------> Do integration stuff
 *       |                 |                   |      response      |
 *       |                 | processResponse() |<-------------------|
 *       |                 |<------------------|                    |
 *       |                 |                   |                    |
 *       |                 |    endBatch()     |                    |
 *       |     complete    |------------------>|                    |
 *       |<----------------|                   |                    |
 *       |                 |                   |                    |
 *       
 *
 * @author Joe McMaster (jmcmaster@vlocity.com)
 *
 * @version 1.1
 *
 * History
 * =======
 * 1.0 - May 24, 2019 - Initial Version
 * 1.1 - May 29, 2019 - Enhanced to support Fulfilment Request Lines
 * 1.2 - Apr 27, 2020 - Fixed issue where class wasn't working properly when triggered against a Fulfillment Request Line
 */
global class IntegrationProcedureSystemInterface extends vlocity_cmt.DefaultSystemInterface {

   /* Exception class */
   public class IntegrationProcedureUnrecoverableException extends Exception {}
    
   /**
    * Default Constructor
    */
   global IntegrationProcedureSystemInterface() {
    
       super();
   }

   /**
    * This method is a part of the ISystemInterface. It is invoked at the start of the batch
    * 
    * @param url   base URL the batch is started for
    * @param path  path this batch is started for
    */
   global override void startBatch(String url, String path) {}

   /**
    * Executes a Callout OrchestrationItem
    * 
    * @param url   base URL to send the request to (in this class it is ignored as we'll be calling an Integration Procedure)
    * @param path  path to send the request to (in this class it is interpreted as the Integration Procedure API Key)
    * @param item  OrchestrationItem that needs to be executed
    */
   global override void executeItem(String url, String path, vlocity_cmt__OrchestrationItem__c item) {

       System.debug('JOE - Orchestration Item -> ' + JSON.serialize(item.getPopulatedFieldsAsMap()));
       
       // Get the Order SObject - the technique will differ depending on if this orchestration item is related to an Order Item or a Fulfillment Request Line
       vlocity_cmt.XOMOrderDomainObject orderObj = null;
       if (item.vlocity_cmt__OrderItemId__c != null) {
       
            Id orderId = item.vlocity_cmt__OrderItemId__r.OrderId;
            orderObj = ((vlocity_cmt.XOMOrderService)vlocity_cmt.XOMObjectFactory.getService(Order.SObjectType)).getObject(orderId, true);
       }
       else {
           
           Set<Id> orderIds = new Set<Id>();
           orderIds.add(item.vlocity_cmt__fulfilmentRequestLineId__r.vlocity_cmt__fulfilmentRequestId__c);
           List<vlocity_cmt.XOMOrderDomainObject> orderObjs = ((vlocity_cmt.XOMOrderService)vlocity_cmt.XOMObjectFactory.getService(Order.SObjectType)).getFulfilmentRequests(orderIds, true);
           
           if (orderObjs.size()>0) orderObj = orderObjs.get(0);
       }
       
       if (orderObj == null) throw new IntegrationProcedureUnrecoverableException('XOM Integration Procedure Callout - Unable to find Order Object');
       
       // The Payload sent to the Integration Procedure is generated by an Optional Request DataRaptor configured on the Orchestration Item Definition
       // If no Request DataRaptor is provided it will default to something like this:
       // 
       // {
       //   "order_id" : "8011U000000tpvgQAA",
       //   "account_id" : "0011U00000RAyv0QAD",
       //   "order_items" : [ {
       //       "order_item_id" : "8021U0000029DzJQAU",
       //       "action" : "Add",
       //       "specified_by" : {
       //           "specification_id" : "01t1U000000rIocQAE",
       //           "specification_name" : "Test Product"
       //       },
       //       "described_by" : []
       //   } ]
       // }
       // 
       Map<String, Object> ipInput   = (Map<String, Object>)JSON.deserializeUntyped(super.generatePayload(item, orderObj));
       Map<String, Object> ipOptions = new Map<String, Object>();
       
       // Add any extra information to the payload that might be useful and otherwise not available via the DataRaptors configured in the Callout
       ipInput.put('orchestration_item_id',   item.Id);
       ipInput.put('orchestration_item_name', item.Name);       
       
       // Call the Integration Procedure
       System.debug('JOE - Attempting to call Integration Procedure "' + path + '"');
       System.debug('JOE - IP Input -> ' + JSON.serialize(ipInput));
       Map<String, Object> ipOutput = (Map <String, Object>) vlocity_cmt.IntegrationProcedureService.runIntegrationService(path, ipInput, ipOptions);       

       // process any response
       processResponse(item, ipInput, ipOutput);
   }

   /**
    * This method is called from executeItem to handle the response from the Integration Procedure.
    * By default it does nothing (but some logging), but it could be customized to do something more.
    *
    * @param item      The Orchestration Item
    * @param ipInput   The request sent to the Integration Procedure
    * @param ipOutput  The response from the Integration Procedure
    */
   global virtual void processResponse(vlocity_cmt__OrchestrationItem__c item, Map<String, Object> ipInput, Map<String, Object> ipOutput) {

       // Do nothing by default
       System.debug('JOE - IP Output -> ' + JSON.serialize(ipOutput));

       // For debugging, store the Request in the Orchestration Item SObject
       item.Request__c = JSON.serialize(ipInput);
       item.Response__c = JSON.serialize(ipOutput);
       update item;
   }
   
   /**
    * This method is called at the end of the batch
    * 
    * @param url   base URL for the batch
    * @param path  path for the batch
    */
   global override void endBatch(String url, String path) {}   
}